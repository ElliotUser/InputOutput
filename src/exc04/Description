                                    Чтение и запись данных в файлы.
    Для ввода-вывода данных в файлы чаще всего применяются классы FileInput Stream и FileOutputStream,
которые создают потоки ввода-вывода байтов, связан­ные с файлами. Чтобы открыть файл для ввода-вывода
данных, достаточно создать объект одного из этих классов, указав имя файла в качестве аргумента кон-
структора. Некоторые конструкторы:

FileInputStream (String имя_файла) throws FileNotFoundException
FileOutputStream (String имя_файла) throws FileNotFoundException

    где параметр имя_файла обозначает имя того файла, который требуется открыть. Если при создании по-
тока ввода файл не существует, то генерируется исключе­ние типа FileNotFoundException. А если при созда-
нии потока вывода файл нельзя открыть или создать, то и в этом случае генерируется исключение типа
FileNotFoundException. Класс исключения FileNotFoundException являет­ся производным от класса IOException.
Когда файл открыт для вывода, любой файл, существовавший ранее под тем же самым именем, уничтожается.
    Завершив работу с файлом, его нужно закрыть. Для этой цели служит метод close(), реализованный в
классах FileInputStream и FileOutputStream:

void close () throws IOException

    Закрытие файла высвобождает выделенные для него системные ресурсы, по­ зволяя использовать их для других
файлов. Неудачный исход закрытия файла мо­жет привести к "утечкам памяти", поскольку неиспользуемые ресурсы
оператив­ нойпамяти останутся выделенными.
    Два основных способа закрытия файла:
    -метод close();
    -оператор try с ресурсами. Этот оператор автоматически закрывает файл, когда он больше не нужен. И в этом
     случае отпадает потребность в явных вызовах метода close();

    Чтобы прочитать данные из файла, можно воспользоваться версией метода read(), определенной в классе
    FileInputStream.

int read() throws IOException

    Всякий раз, когда вызывается метод read(), он выполняет чтение одного бай­ та из файла и возвращает его в
виде целочисленного значения. А если достигнут конец файла, то возвращается значение - 1. Этот метод может
сгенерировать исключение типа IOException.

Пример.
    В примере программы метод read() применяется для вво­да из файла, содержащего текст в коде ASCII, который
затем выводится на экран.
    Обратите внимание в данном примере программы на блок операторов try/catch, обрабатывающий ошибки, кото-
рые могут произойти при вводе-выводе. Каждая операция ввода-вывода проверяется на наличие исключений, и если
исключение возникает, то оно обрабатывается. В простых программах или примерах кода исключения, возникающие
в операциях ввода-вывода, как правило, генерируются в методе main(), как это делалось в предыдущих примерах
ввода-вывода на консоль. Кроме того, в реальном прикладном коде иногда оказывается полезно, чтобы исключение
распространялось в вызывающую часть программы, уведомляя ее о неудачном исходе операции ввода-вывода.