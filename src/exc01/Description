                                 Потоки ввода-вывода.
    Система ввода-вывода в Java цулостна и последовательна. Если усвоить ее основы, то овладеть
всем остальным будеть просто.
    В программах нa Java создаются потоки ввода-вывода. Потак ввода-вывода - это абстракция,
которая поставляет или потребляет информацию. Поток ввода-вывода связан с физическим устройством
через систему ввода-вывода в Java. Вес потоки ввода-вывода ведут себя одинаково, несмотря на отли-
чия в конкретных физических устройствах, с которыми они связаны. Таким образом, одни и те же клас-
сы и методы ввода-вывода применимы к разнотипным устройствам. Это означает что аб­стракция потока
ввода может охватывать разные типы ввода: из файла на диске, клавиатуры или сетевого соединения.
Аналогично поток вывода может обращаться к консоли, файлу на диске или сетевому соединению. Потоки
ввода-вывода представляют ясный способ организации ввода-вывода, избавляя от необходимостм разби-
раться в отличиях, например, клавиатуры от сети. В языке Java потоки ввода-вывода реализуются в
пределах иерархии классов, определенных в пакетах java.io.



                          Потоки ввода вывода байтов и символов.
    B Java определяются два вида потоков ввода-вывода: байтов и символов. Потоки ввода-вывода бай-
тов предоставляют удобные средства для управления вводом и вы­водом отдельных байтов. Данные потоки
используются, например, при чтении и записи двоичных данных. Потоки ввода-вывода симлолов предоста-
вляют удобные средства управления вводом и выводом отдельных символов. С этой целью в них применя-
ется кодировка в Юникоде, допускающая интернацианализацию. Кроме того, потоки ввода-вывода символов
оказываются порой более эффективными.



                            Класс потоков ввода-вывода байтов.
    Потоки ввода-вывода байтов определены в двух иерархиях классов. На верши­ не этих иерархий нахо-
дятся абстрактные классы InputStream и OutputStream. У каждого из этих абстрактных классов имеется
несколько конкретных подклас­сов, в которых учитываются отличия разных устройств, в числе файлов на
диске, сетевых соединений и даже буферов памяти.
    В абстрактных классах InputStream и OutputStream определяется ряд ключевых методов, реализуемых
в других классах потоков ввода-вывода. Наиболее важными среди них являются методы read() и write(),
читающие и записывающие байты данных соответственно. Оба эти метода объявлены как абстрактные в
классах InputStream и OutputStream, а в производных классах они переопределяются.



                            Класс потоков ввода-вывода символов.
    Потоки ввода-вывода символов также определены в двух иерархиях классов. На вершине этих иерархий
находятся два абстрактных класса - Reader и Writer. Эти абстрактные классы управляют потоками симво-
лов в Юникоде.
    В абстрактных классах Reader и Writer определяется ряд ключевых методов, реализуемых в других
классах потоков ввода-вывода. Наиболее важными среди них являются методы read() и write(), читающие
и записывающие байты данпых соответственно. Оба эти метода объявлены как абстрактные в классах Reader
и Writer, а в производных классах они переопределяются.



                            Предопределенные потоки ввода-вывода.
    Все программы в Java автоматически импортируют пакет java.lang. В этом пакете определен класс
System, инкапсулирующий некоторые свойства исполняющей среды Java. Используя некоторые из его методов,
можно, например, получить, текущее время и настройки различных параметров, связанных с системой. Класс
System содержит также три переменные предопределенных потоков ввода-вывода: in , out и err. Эти пере-
менные объявлены в классе System как public, static и final. Это означает, что они могут быть исполь-
юваны в любой другой части прикладной программы беа обращения к конкретному объекту класса System.
    Переменная System.out ссылается на стандартный поток вывода(консоль).
    Переменная System.in ссылается на стандартный поток ввода(клавиатура).
    Переменная System.err ссылается на стандартный поток вывода ошибок(консоль).
    Переменная System. in содержит объект тина InputStream, а переменные System.out и System.err содер-
жат объекты типа PrintStream. Это потоки ввода-вывода байтов, хотя они, как правило, используются для
чтения символов с консоли и записи символов на консоль.



                                Чтение данных, вводимых с консоли.
    В Java данные, вводимые с консоли, читаются иа стандартного потока ввода System.in. Чтобы нолучить
поток ввода символов, присоединив его к консоли, следует заключить стандартный поток ввода System.in в
оболочку объекта класса BufferedReader, поддерживающего буферизованный поток ввода.

BufferedReader (Reader поток_чтения_вводиных_данных)

    Здесь параметр поток_чтения_вводиных_данных обозначает поток, который связывается с создаваемым эк-
земпляром класса BufferedReader. Класс Reader является абстрактным. Одним из производных от него кон-
кретных подклассов яв­ляется класс InputStreamReader, преобразующий байты в символы. Для получения объекта
типа  InputStreamReader, связанного со стандартным потоком вывода System.in, служит следующий конструктор:

InputStreamReader (InputStream поток_ввода)

    Переменная System.in ссылается на объект класса InputStream и поэтому должна быть указана в качестве
параметра поток_ввода. В конечном итоге получается приведенная ниже строка кода, в которой создается объект
типа BufferedReader, связанный с клавиатурой. После выполнения этой строки кода переменная экземпляра br
будет содержать поток ввода символов, связанный с консолью через стандартный поток ввода System.in.

BufferedReader br = new BufferedReader (new InputStreamReader(System.in));



                                    Чтение символов.
    Для чтения символа из потока ввода типа BufferedReader служит метод read().

int read() throws IOException

    Каждый раз, когда вызывается метод read() , он читае символ из потока ввода и возвращает его в виде цело-
численного значения. По достижении конца потока возвращается значение -1. Как видите, метод read() может гене-
рировать исключение тина IOException.

ПРИМЕР.
    В приведенном ниже примере программы демонстрируется применение мстода read() для чтения
символов с консоли до тех пор, пока пользователь не введет символ 'q'. Следует заметить, что
любые исключения, возникающие при вводе-выводе, просто игнорируются в методе main().


















